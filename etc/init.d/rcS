#!/bin/sh
#
# /etc/init.d/rcS    : Initial boot script for SliTaz GNU/Linux
# Configuration file : /etc/rcS.conf
#
# rcS is the main initialization script used to check fs, mount, clean,
# run scripts and start daemons.
#
. /etc/init.d/rc.functions
. /etc/rcS.conf

# Set PATH, TZ and boot time.
export PATH=/bin:/sbin:/usr/bin:/usr/sbin
[ -s /etc/TZ ] && export TZ="$(cat /etc/TZ)"
[ -n "$bootdate" ] || bootdate=$(date +%s)

case "$1" in

readonly)

colorize 34 "Processing /etc/init.d/rcS..."

# Mount /proc.
echo -n "Mounting proc filesystem..."
mount proc && status

# Mount /run as tmpfs to avoid pidfile and other runtime data behing
# writting to disk.
echo -n "Mounting tmpfs filesystem on: /run"
mount -t tmpfs tmpfs /run
status

# Before mounting filesystems we check fs specified in the file
# /etc/rcS.conf and variable $CHECK_FS.
if [ "$CHECK_FS" ]; then
	mount -o remount,ro /
	for i in $CHECK_FS; do
		colorize 36 "Checking filesystem: $i"
		e2fsck -p $i
	done
fi

# Remount rootfs rw.
echo "Remounting rootfs read/write..."
mount -o remount,rw /
;;

readwrite)

# Trigger Udev and handle hotplug events
if [ "$UDEV" = "yes" ]; then
	echo -n "Mounting devtmpfs filesystem..."
	mount -t devtmpfs devtmpfs /dev
	status
	echo "Starting udev daemon..."
	mkdir -p /run/udev
	udevd --daemon 2>/dev/null
	echo "Udevadm requesting events from the Kernel..."
	udevadm trigger
	echo "Udevadm waiting for the event queue to finish..."
	udevadm settle --timeout=120
	# Disable hotplug helper since udevd listen to netlink
	echo "" > /proc/sys/kernel/hotplug
fi

# Mount filesystems in /etc/fstab.
echo "Mounting filesystems in fstab..."
mount -a

# Be quiet
echo "0 0 0 0" > /proc/sys/kernel/printk
;;

logged)

# Store boot messages to log files.
dmesg > /var/log/dmesg.log &

# Parse cmdline args for earlier boot options. All other boot options
# are in /etc/init./bootopts.sh.
echo -n "Searching for early boot options..."
for opt in $(cat /proc/cmdline)
do
	case $opt in
		cdrom=*)
			export CDROM=${opt#cdrom=} ;;
		modprobe=*)
			export MODPROBE="yes" ;;
		config=*)
			export CONFIG=${opt#config=} ;;
		*)
			continue ;;
	esac
done
status

# Clean up the system and set up tmp X11 and ICE dir
if [ "$CLEAN_UP_SYSTEM" = "yes" ]; then
	echo -n "Cleaning up the system..."
	find /var/run -name "*.pid" -type f | xargs /bin/rm -f
	rm -rf /tmp /var/run/dbus/* /var/run/hald/pid /var/lock/*
	mkdir -p /tmp/.X11-unix /tmp/.ICE-unix
	chmod -R 1777 /tmp
	status
else
	echo "System clean up is disabled in: /etc/rcS.conf"
fi

# Create /dev/cdrom if needed (symlink does not exist on LiveCD).
# Also add /dev/cdrom to fstab if entry does not exist.
if [ "$CDROM" ]; then
	DRIVE_NAME=${CDROM#/dev/}
else
	DRIVE_NAME=$(fgrep -s "drive name" /proc/sys/dev/cdrom/info | cut -f 3)
fi
if [ "$DRIVE_NAME" -a ! "$(readlink /dev/cdrom)" ]; then
	echo -n "Creating symlink : /dev/cdrom..."
	ln -s /dev/$DRIVE_NAME /dev/cdrom
	ln -s /dev/$DRIVE_NAME /dev/dvd
	status
fi

# Handle kernel cmdline parameter modprobe=<module_list>
if [ "$MODPROBE" ]; then
	MODULES=$(sed -e 's/.* modprobe=\([^ ]*\).*/\1/' -e 's/,/\n/g' < /proc/cmdline)
	for i in $MODULES; do
		echo -n "Loading kernel module: $i"
		modprobe $i
		status
	done
fi

# Handle kernel cmdline parameter config=<device>,<path> to source a
# disk init script
if [ -n "$CONFIG" ]; then
	DEVICE=${CONFIG%,*}
	SCRIPT=${CONFIG#*,}
	echo "Probing $DEVICE... "
	if ! mount -r $DEVICE /mnt; then
		if echo $DEVICE | grep -Eq "/dev/sd|UUID=|LABEL="; then
			USBDELAY=$(cat /sys/module/usb_storage/parameters/delay_use)
			USBDELAY=$((1+$USBDELAY))
			echo "$DEVICE is potentially a USB device: sleep for $USBDELAY seconds"
			sleep $USBDELAY
		fi
		if ! mount -r $DEVICE /mnt; then
			CONFIG=""
		fi
	fi
	echo -n "Source $SCRIPT from $DEVICE..."
	if [ -n "$CONFIG" ]; then
		. /mnt/$SCRIPT
		umount /mnt 2> /dev/null || true
	fi
	status
fi

# Mount /proc/bus/usb
if [ -d /proc/bus/usb ]; then
	echo -n "Mounting /proc/bus/usb filesystem..."
	mount -t usbfs usbfs /proc/bus/usb
	status
fi

# Start syslogd and klogd
echo -n "Starting system log deamon: syslogd..."
syslogd -s $SYSLOGD_ROTATED_SIZE && status
echo -n "Starting kernel log daemon: klogd..."
klogd && status

# Load all modules listed in config file
if [ "$LOAD_MODULES" ]; then
	colorize 33 "Loading Kernel modules..."
	for mod in $LOAD_MODULES; do
		echo -n "Loading module: $mod"
		modprobe $mod
		status
	done
fi

# Detect PCI and USB devices with Tazhw from slitaz-tools. We load
# kernel modules only at first boot or in LiveCD mode.
if [ ! -s /var/lib/detected-modules ]; then
	tazhw init
fi

# Call udevadm trigger to ensure /dev is fully populate now that all
# modules are loaded.
if [ "$UDEV" = "yes" ]; then
	echo -n "Triggering udev events: --action=add"
	udevadm trigger --action=add
	status
fi

# Start all scripts specified with $RUN_SCRIPTS
for script in $RUN_SCRIPTS; do
	echo $(colorize 34 "Processing: /etc/init.d/$script")
	/etc/init.d/$script
done

# Start all daemons specified with $RUN_DAEMONS
if [ "$RUN_DAEMONS" ]; then
	colorize 33 "Starting all daemons..."
	for daemon in $RUN_DAEMONS; do
		/etc/init.d/$daemon start
	done
fi

# Back to a verbose mode
(sleep 6 && echo "7 4 1 7" > /proc/sys/kernel/printk) &

if [ "$MESSAGE" ]; then
	newline
	colorize 32 "$MESSAGE"
fi

# Display and log boot time
time=$((`date +%s` - $bootdate))
echo $time > /var/log/boot-time
echo "SliTaz boot time: ${time}s"
;;

*)
	# --> readonly --> readwrite --> logged.
	#if [ ! -s /run/boot.log ]; then
		#mount -t devpts devpts /dev/pts
		#mount -t tmpfs tmpfs /run
	#fi
	#script -aqc '/etc/init.d/rcS readonly' /run/boot.log
	#script -aqc '/etc/init.d/rcS readwrite' /run/boot.log
	/etc/init.d/rcS readonly
	/etc/init.d/rcS readwrite
	# Lograde boot.log
	#last=.9
	#for i in .8 .7 .6 .5 .4 .3 .2 .1 .0 '' ; do
		#mv -f /var/log/boot.log$i /var/log/boot.log$last 2>/dev/null
		#last=$i
	#done
	#mv -f /run/boot.log /var/log/boot.log
	#script -aqc '/etc/init.d/rcS logged' /var/log/boot.log
	/etc/init.d/rcS logged ;;
esac
